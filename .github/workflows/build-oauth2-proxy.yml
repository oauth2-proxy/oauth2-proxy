name: "Build oauth2-proxy image"

on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'Repository to build from'
        default: 'oauth2-proxy'
      ref:
        description: 'Branch to build'
        default: 'master'
      context:
        description: "Docker context (folder containing code)"
        required: true
        default: '.'
      dockerfilepath:
        description: "Path to Dockerfile"
        required: true
        default: './Dockerfile'
      fullimagename:
        description: "GCR image folder override (goes to gcr.io/devsentient-infra/IMAGENAME:TAG)"
        required: true
        default: "oauth2-proxy"
      imagetag:
        description: "GCR image tag override (goes to gcr.io/devsentient-infra/IMAGENAME:TAG)"
        required: true
        default: "latest"
      additional_build_args:
        description: "Additional build arguments (optional, format: ARG_NAME_1=value1,ARG_NAME_2=value2)"
        required: false
        default: ""

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  YQ_VERSION: v4.2.1
  YQ_BINARY: yq_linux_amd64
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-custom-image:
    name: Build a custom image
    runs-on: ubuntu-20.04

    steps:
    - name: Echo parameters
      shell: bash
      run: echo "Building with \n Context ${{ github.event.inputs.context }} \n Dockerfile ${{ github.event.inputs.dockerfilepath }} \n Additional Build Args ${{ github.event.inputs.additional_build_args }} \n Push to gcr.io/${{ env.PROJECT_ID }}/${{ github.event.inputs.fullimagename }}:${{ github.sha }} and gcr.io/${{ env.PROJECT_ID }}/${{ github.event.inputs.fullimagename }}:${{ github.event.inputs.imagetag }}"

    - name: Checkout
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Clone the ${{ github.event.inputs.repo }} ${{ github.event.inputs.ref }} branch
      uses: actions/checkout@v2
      with:
        repository: devsentient/${{ github.event.inputs.repo }}
        ref: ${{ github.event.inputs.ref }}
        path: ${{ github.event.inputs.repo }}
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 1

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: gcloud --quiet auth configure-docker

    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch

    - name: Download yq
      shell: bash
      run: |- 
        wget https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/${YQ_BINARY}.tar.gz -O - | tar xz && mv ${YQ_BINARY} ./yq
    
    - uses: docker/setup-buildx-action@v3
      id: buildx
      with:
        install: true

    - name: Build image
      uses: docker/build-push-action@v5
      with:
        provenance: false
        context: ${{ github.event.inputs.context }}
        file: ${{ github.event.inputs.dockerfilepath }}
        push: true
        tags: |
          gcr.io/${{ env.PROJECT_ID }}/${{ github.event.inputs.fullimagename }}:${{ github.sha }}
          gcr.io/${{ env.PROJECT_ID }}/${{ github.event.inputs.fullimagename }}:${{ github.event.inputs.imagetag }}
        build-args: |
          GITHUB_SHA=${{ github.sha }}
          GITHUB_REF=${{ github.ref }}
          BUILDKIT_INLINE_CACHE=1
          ${{ github.event.inputs.additional_build_args }}
      env:
        PROJECT_ID: ${{ env.PROJECT_ID }}
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_REF: ${{ github.ref }}
