injectRequestHeaders:
- name: X-Forwarded-Groups
  values:
  - claim: groups
- name: X-Forwarded-User
  values:
  - claim: user
- name: X-Forwarded-Email
  values:
  - claim: email
- name: X-Forwarded-Preferred-Username
  values:
  - claim: preferred_username
- name: Authorization
  values:
  - claim: id_token
    prefix: 'Bearer '
injectResponseHeaders:
- name: X-Auth-Request-User
  values:
  - claim: user
- name: X-Auth-Request-Email
  values:
  - claim: email
- name: X-Auth-Request-Preferred-Username
  values:
  - claim: preferred_username
- name: X-Auth-Request-Groups
  values:
  - claim: groups
- name: X-Auth-Request-Access-Token
  values:
  - claim: access_token
- name: Authorization
  values:
  - claim: id_token
    prefix: 'Bearer '
upstreamConfig: 
  upstreams:   
  - ID: httpbin
    Path: /
    URI: "http://httpbin"
providers:
- provider: keycloak-oidc
  id: realm1
  clientID: oauth2-proxy
  clientSecret: tlNnq69vQZTeLoFloXv0SlEW5AdpGsu3
  scope: "openid email profile"
  loginURL: "http://keycloak.localtest.me:9080/auth/realms/realm1/protocol/openid-connect/auth"
  redeemURL: "http://keycloak.localtest.me:9080/auth/realms/realm1/protocol/openid-connect/token"
  profileURL: "http://keycloak.localtest.me:9080/auth/realms/realm1/protocol/openid-connect/userinfo"
  validateURL: "http://keycloak.localtest.me:9080/auth/realms/realm1/protocol/openid-connect/userinfo"
  code_challenge_method: "S256"
  oidcConfig:
    jwksURL: "http://keycloak.localtest.me:9080/auth/realms/realm1/protocol/openid-connect/certs"
    issuerURL: "http://keycloak.localtest.me:9080/auth/realms/realm1"
    emailClaim: "email"
    groupsClaim: "groups"
    userIDClaim: "email"
    skipDiscovery: true
    audienceClaims:
      - "aud"
    insecureSkipNonce: true
    insecureAllowUnverifiedEmail: true
    insecureSkipIssuerVerification: true
- provider: keycloak-oidc
  id: realm2
  clientID: oauth2-proxy
  clientSecret: NgvqdagqlFtrY4QXg7X0kKfZ6YmLzX5P
  scope: "openid email profile"
  loginURL: "http://keycloak.localtest.me:9080/auth/realms/realm2/protocol/openid-connect/auth"
  redeemURL: "http://keycloak.localtest.me:9080/auth/realms/realm2/protocol/openid-connect/token"
  profileURL: "http://keycloak.localtest.me:9080/auth/realms/realm2/protocol/openid-connect/userinfo"
  validateURL: "http://keycloak.localtest.me:9080/auth/realms/realm2/protocol/openid-connect/userinfo"
  code_challenge_method: "S256"
  oidcConfig:
    jwksURL: "http://keycloak.localtest.me:9080/auth/realms/realm2/protocol/openid-connect/certs"
    issuerURL: "http://keycloak.localtest.me:9080/auth/realms/realm2"
    emailClaim: "email"
    groupsClaim: "groups"
    userIDClaim: "email"
    skipDiscovery: true
    audienceClaims:
      - "aud"
    insecureSkipNonce: true
    insecureAllowUnverifiedEmail: true
    insecureSkipIssuerVerification: true
- provider: oidc
  id: dex
  clientSecret: b2F1dGgyLXByb3h5LWNsaWVudC1zZWNyZXQK
  clientID: oauth2-proxy
  oidcConfig:
    issuerURL: http://dex.localtest.me:4190/dex
    audienceClaims:
      - "aud"
    emailClaim: "email"
server:
  BindAddress: 0.0.0.0:4180
  SecureBindAddress: ""
  TLS: null
providerMatcher: 
  rules:
    # this rule gets the provider from hTTP requests query parameter `?pid=provider1`
    - source: "query"
      queryParam: "pid"
      expr: ".*"
      captureGroup: 0
providerLoader:
  type: "config"
  postgresLoader:
    secret: 6dQJG20eVOMb9JQLhxf0GUjnB6DHJAqU #used to encrypt client secret before storing in postgres
    postgres:
      host:           "postgres"
      port:           5432
      database:       "postgres"
      schema:         "public"
      user:           "admin"
      password:       "admin"
      maxConnections: 50
      sslMode:        "disable"
      sslRootCert:    ""
    redis: 
      connectionURL: "redis://redis:6379"
      password: "admin"
      expiry:  100000000000000
      prefix: "oauth"
    aPI:
      host: "0.0.0.0"
      port: 8090
      pathPrefix: "/oauthapi"
      readHeaderTimeout: 10000000000
      handlerTimeout: 60000000000